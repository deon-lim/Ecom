name: CI/CD for Ecom Microservices

# Trigger on pushes to main and on pull requests targeting main
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Shared environment variables
env:
  # Docker Hub settings
  DOCKERHUB_REGISTRY: docker.io
  #DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_USERNAME: nusissteam21

jobs:
  build-and-push:
    name: Build, Test & Publish Docker Images
    runs-on: ubuntu-latest

    # Run this job for each microservice in parallel
    strategy:
      matrix:
        service:
          - ecommerce-customer
         # - ecommerce-gateway
         # - ecommerce-order
         # - ecommerce-order2
         # - ecommerce-product

    steps:
      # 1. Get the code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Install JDK & enable Maven cache
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      # 3. Build & test with Maven
      - name: Build & test ${{ matrix.service }}
        working-directory: ${{ matrix.service }}
        run: mvn clean verify --batch-mode

      # 4. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          #username: ${{ secrets.DOCKERHUB_USERNAME }}
          username: nusissteam21
          password: nusissteam21
          #password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Build & push Docker image (using Dockerfile in .devcontainer)
      - name: Build & push ${{ matrix.service }} image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service }}
          file: ${{ matrix.service }}/.devcontainer/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ github.sha }}

# === Optional AWS ECS Deployment ===
#
# To enable, uncomment the entire block below and set these secrets:
#   AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, ECS_CLUSTER_NAME

  deploy-to-ecs:
    name: Deploy All Services to AWS ECS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: AKIAQLVQQ2W3DXLEP2FM
          aws-secret-access-key: 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
          aws-region: ap-southeast-1

      - name: Log in to Amazon ECR (if using ECR)
        uses: aws-actions/amazon-ecr-login@v1

      - name: Force New Deployment of Each Service
        run: |
          # (Optional) loop for all services
          # for svc in ecommerce-customer ecommerce-gateway ecommerce-order ecommerce-order2 ecommerce-product; do
          for svc in customer; do
            aws ecs update-service \
              --cluster ecom-services-cluster-v1 \
              --service "${svc}-service" \
              --force-new-deployment
          done