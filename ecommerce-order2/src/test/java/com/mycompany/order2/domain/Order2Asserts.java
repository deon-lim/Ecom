package com.mycompany.order2.domain;

import static com.mycompany.order2.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class Order2Asserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrder2AllPropertiesEquals(Order2 expected, Order2 actual) {
        assertOrder2AutoGeneratedPropertiesEquals(expected, actual);
        assertOrder2AllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrder2AllUpdatablePropertiesEquals(Order2 expected, Order2 actual) {
        assertOrder2UpdatableFieldsEquals(expected, actual);
        assertOrder2UpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrder2AutoGeneratedPropertiesEquals(Order2 expected, Order2 actual) {
        assertThat(actual)
            .as("Verify Order2 auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrder2UpdatableFieldsEquals(Order2 expected, Order2 actual) {
        assertThat(actual)
            .as("Verify Order2 relevant properties")
            .satisfies(a -> assertThat(a.getCustomerId()).as("check customerId").isEqualTo(expected.getCustomerId()))
            .satisfies(a -> assertThat(a.getOrderStatus()).as("check orderStatus").isEqualTo(expected.getOrderStatus()))
            .satisfies(a ->
                assertThat(a.getTotalAmount())
                    .as("check totalAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalAmount())
            )
            .satisfies(a -> assertThat(a.getCreatedOn()).as("check createdOn").isEqualTo(expected.getCreatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrder2UpdatableRelationshipsEquals(Order2 expected, Order2 actual) {
        // empty method
    }
}
